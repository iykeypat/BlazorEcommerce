@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService Authservice
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@Message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="containe">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/productdetail/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span>
                    <br />
                    <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" class="form-control input-quantity" min="1" />
                    <button class="btn-delete" @onclick="@( ()=> RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(product.Price * product.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
        </div>
    </div>

    if (isAuthenticated)
    {
        <div>
            <h5>Delivery Address</h5>
            <AddressForm></AddressForm>
        </div>
    }

    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Checkout</button>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string Message = "Loading cart...";
    bool isAuthenticated = false; //A flag to monitor if a user is authenticated

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await Authservice.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {

        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();

    }

    private async Task LoadCart()
    {

        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();


        if (cartProducts == null || cartProducts.Count == 0)
        {
            Message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse cartProduct)
    {

        cartProduct.Quantity = int.Parse(e.Value.ToString());
        if (cartProduct.Quantity < 1)
        {
            cartProduct.Quantity = 1;
        }

        await CartService.UpdateQuantity(cartProduct);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}
