@page "/cart"
@inject ICartService CartService

<PageTitle >Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@Message</span>
} else{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="containe">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span>
                    <br />
                    <button class="btn-delete" @onclick = "@( ()=> RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@product.Price
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price)
        </div>
    </div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string Message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId){

        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();

    }

    private async Task LoadCart(){

        if ((await CartService.GetCartItems()).Count == 0)
        {
            Message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }
}
