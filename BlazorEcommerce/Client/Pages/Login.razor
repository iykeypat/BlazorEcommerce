@page "/login"
@inject IAuthService AUthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationstateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(()=>user.Email)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(()=>user.Password)"></ValidationMessage>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @*<ValidationSummary></ValidationSummary>*@
</EditForm>

<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private string errorMessage = string.Empty;
    private UserLogin user = new UserLogin();

    private async Task HandleLogin(){
        var result = await AUthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationstateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }else
        {
            errorMessage = result.Message;
        }
    }
}
