@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager


<style>
    img {
        max-height: 100px;
        max-width: 100px;
    }

    .row {
        display: flex;
        padding: 6px;
    }

    .col {
        flex: 1;
    }

    .header {
        display: flex;
        font-weight: 600;
        text-align: center;
        border-bottom: 1px solid lightgray;
        margin-bottom: 6px;
        padding-bottom: 6px;
    }

    .col-visible {
        text-align: center;
    }

</style>

@if (loading)
{
    <span>@message</span>
}
else
{
    if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>

        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>

        <div class="mb-0">
            <img src="@product.ImageUrl" />
        </div>

        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />

        <div class="header">
            <div class="col">Product Type / Vaiant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>

        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visibile">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5)" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(()=>RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }

        <button class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />

        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />

        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />

        <button type="submit" class="btn btn-primary float-end">
            @btnText
        </button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string message = "Loading...";

    //this method runs immediately this page is loaded
    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    //runs once the passed parameter in url is accurately set
    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;

            if (dbProduct == null)
            {
                message = $"Product with Id: {Id}, does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }

        loading = false;
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        } else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}",true);
        }
    }

    //is called for removing variant by admin
    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);

        if (variant == null)
        {
            return;
        }

        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    //is called for adding variant by admin
    void AddVariant()
    {
        product.Variants.Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }
}
