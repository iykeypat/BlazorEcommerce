@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<style>

    .show-menu {
        display: block;
    }

    .user-button {
        margin-left: .5em;
    }

    .top-row a {
        margin-left: 0px;
    }

    .dropdown-item:hover {
        background-color: white;
    }
</style>


<div class="dropdown" style="margin-left:5px;">
    <button @onclick="ToggleUserMenu" @onfocusout="HideUserMenu" class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>

    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <hr />
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>

            <NotAuthorized>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
                <a href="register" class="dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>

    </div>
</div>

@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(2000);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
