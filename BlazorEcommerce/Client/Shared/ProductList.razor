@inject IProductService productService;
@implements IDisposable

<style>
    
.media-img{
    max-height: 200px;
    max-width: 200px;
    border-radius: 6px;
    margin-bottom: 10px;
    transition: transform .2s;

}

.media-img:hover{
    transform: scale(1.1);
}

.media-img-wrapper{
    width: 200px;
    text-align: center;
}

.page-selection{
    margin-right: 15px;
    margin-bottom: 30px;
}
</style>

@if (productService.Products == null || productService.Products.Count == 0)
{
    <span> @productService.Message</span>
}
else
{
    
<ul class="list-unstyled">
    @foreach (var product in productService.Products)
    {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                <a href="productdetail/@product.Id">
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title">
                </a>
            </div>
            <div class="media-body">
                <a href="productdetail/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p> @product.Description</p>
                <h5 class="price">@GetPriceText(product)</h5>
            </div>
        </li>
    }
</ul>

for (int i = 1; i <= productService.PageCount; i++)
    {
        <a class="btn @(i == productService.CurrentPage? "btn-info" : "btn-outline-info") page-selection" href="/search/@productService.LastSearchText/@i"> @i  </a>
        <span>&nbsp;</span>
    }

}

@code {

    protected override void OnInitialized()
    {
        productService.ProductChanged += StateHasChanged;
    }

    public void Dispose(){
        productService.ProductChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product){

        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        } else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(x => x.Price);

        return $"Starting at ${minPrice}";
    }
}
